def infoGain(P,N):
    import math
    return -P/(P+N)*math.log2(P/(P+N))-N/(P+N)*math.log2(N/(P+N))
def insertNode(tree,addTo,Node):
    for k,v in tree.items():
        if isinstance(v,dict):
            tree[k]=insertNode(v,addTo,Node)
    if addTo in tree:
        if isinstance(tree[addTo],dict):
            tree[addTo][Node]='None'
        else:
             tree[addTo]={Node:'None'}
    return tree

def insertconcept(tree,addTo,Node):
    for k,v in tree.items():
        if isinstance(v,dict):
            tree[k]=insertConcept(v,addTo,Node)
    if addTo in tree:
        tree[addTo]=Node
    return None

def getnextnode(data,attributelist,concept,conceptvals,tree,addTo):
    Total=data.shape[0]
    if Total==0:
        return tree
    countC={}
    for cVal in conceptvals:
        dataCC=data[data[concept]==cVal]
        countC[cVal]=dataCC.shape[0]
    if countC[conceptVals[0]]==0:
        tree=insertconcept(tree,addTo,conceptvals[1])
        return tree
    if countC[conceptVals[1]]==0:
        tree=insertconcept(tree,addTo,conceptvals[0])
        return tree
    ClassEntropy=infoGain(countC[conceptvals[0]],countC[conceptvals[1]])
    Attr={}
    for a in AttributeList:
        Attr[a]=list(set(data[a]))
    AttrCount={}
    EntropyAttr={}
    for att in Attr:
        for vals in Attr[att]:
            for c in conceptvals:
                iData=data[data[att]==vals]
                dataAtt=iData[iData[concept]==c]
                AttrCount[c]=dataAtt.shape[0]
            TotalIfo=AttrCount[conceptvals[0]]+AttrCount[conceptvals[1]]
            if AttrCount[conceptvals[0]]==0 or AttrCount[conceptvals[1]]==0:
                InfoGain=0
            else:
                InfoGain=infoGain(AttrCount[conceptvals[0]],AttrCount[conceptvals[1]])
            if att not in EntropyAttr:
                EntropyAttr[att]=(TotalInfo/Total)*InfoGain
            else:
                EntropyAttr[att]=EntropyAttr[att]+(TotalInfo/Total)*InfoGain
    Gain={}
    for g in EntropyAttr:
        Gain[g]=ClassEntropy-EntropyAttr[g]
    Node=max(Gain,key=Gain.get)
    tree=insertNode(tree,addTo,Node)
    for nD in Attr[Node]:
        tree=insertNode(tree,Node,nD)
        newData=data[data[Node]==nD].drop(Node,axis=1)
        AttributeList=list(newData)[:-1]
        tree=getnextnode(newData,AttributeList,concept,conceptvals,tree,nD)
    return tree

import pandas as pd
def main():
    data=pd.read_csv('Datasets/PlayTennis.csv')
    if 'Unnmaed:0' in data.columns:
        data=data.drop('Unnamed:0',axis=1)
    AttributeList=list(data)[:-1]
    concepts=str(list(data)[-1])
    conceptvals=list(set(data[concept]))
    tree=getnextnode(data,AttributeList,concept,conceptvals,{'root':'None'},'root')
    return tree
